/*#[macro_use]
extern crate diesel;
#[macro_use]
extern crate serde_derive;

use actix_web::{middleware, App, HttpServer, HttpResponse, web, get, post};
use diesel::prelude::*;
use diesel::r2d2::{self, ConnectionManager};

type Pool = r2d2::Pool<ConnectionManager<SqliteConnection>>;*/

// working with failure scenarios
//mod errors;
// defines rust representation of our data model as represented by our database
//mod models;
// defining the handlers that will make up the functions that get called by the framework in response to web requests
//mod routes;
//this is autogenerated by Diesel. updated with Rust code
// which Diesel uses to understand the state of your database
//mod schema;
/*

pub struct Site {
    port: u16,
}

impl Site {
    pub fn new (port: u16) -> Self { Site { port } }

    pub fn run(&self, manager: ConnectionManager::<SqliteConnection>) -> std::io::Result<()> {


        println!("Starting http server: 127.0.0.1:{}", self.port);

            HttpServer::new(move || {
            App::new()
                .data(
                    r2d2::Pool::builder()
                          .build(manager)
                          .expect("Failed to create pool.").clone())
                .wrap(middleware::Logger::default())
                //  MIGHT NEED TO CHANGE ACCESS CONTROL VALUE EVENTUALLY!
                .wrap(middleware::DefaultHeaders::new().header("Access-Control-Allow-Origin", "*"))
                .wrap(middleware::DefaultHeaders::new().header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE, PUT"))
                .wrap(middleware::DefaultHeaders::new().header("Access-Control-Allow-Headers", "X-PINGOTHER,append,Content-Type,delete,entries,foreach,get,has,keys,set,values,Authorization"))
                .configure(routes::users::configure)
        })
            .bind(("127.0.0.1",self.port))?
            .run()
    }
}*/
