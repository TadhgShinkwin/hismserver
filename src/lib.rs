#[macro_use]
extern crate diesel;
#[macro_use]
extern crate serde_derive;

use actix_web::{middleware, App, HttpServer};
use diesel::prelude::*;
use diesel::r2d2::{self, ConnectionManager};

type Pool = r2d2::Pool<ConnectionManager<SqliteConnection>>;

// working with failure scenarios
mod errors;
// defines rust representation of our data model as represented by our database
mod models;
// definiing the handlers that will make up the functions that get called by the framework in response to web requests
mod routes;
//this is autogenerated by Diesel. updated with Rust code
// which Diesel uses to understand the state of your database
mod schema;

pub struct Site {
    port: u16,
}

impl Site {
    pub fn new(port: u16) -> Self {
        Site { port }
    }

    pub fn run(&self, database_url: String) -> std::io::Result<()> {
        //he ConnectionManager type is
        // generic over the underlying connection which we specify as SqliteConnection
        //The SqliteConnection type is imported as part of the Diesel prelude because we turned
        // the Sqlite feature on. We then use the r2d.
        let manager = ConnectionManager::<SqliteConnection>::new(database_url);
        let pool = r2d2::Pool::builder()
            .build(manager)
            .expect("Failed to create pool.");

        println!("Starting http server: 127.0.0.1:{}", self.port);
        HttpServer::new(move || {
            App::new()
                .data(pool.clone())
                .wrap(middleware::Logger::default())
                .configure(routes::users::configure)
        })
            .bind(("127.0.0.1",self.port))?
            .run()
    }

}