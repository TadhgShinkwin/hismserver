use dotenv::dotenv;
use std::env;


#[macro_use]
extern crate diesel;
#[macro_use]
extern crate serde_derive;

use actix_web::{middleware, App, HttpServer, HttpResponse, web, get, post};
use diesel::prelude::*;
use diesel::r2d2::{self, ConnectionManager};




type Pool = r2d2::Pool<ConnectionManager<SqliteConnection>>;

// working with failure scenarios
mod errors;
// defines rust representation of our data model as represented by our database
mod models;
// defining the handlers that will make up the functions that get called by the framework in response to web requests
mod routes;
//this is autogenerated by Diesel. updated with Rust code
// which Diesel uses to understand the state of your database
mod schema;

#[actix_rt::main]
async fn main() -> std::io::Result<()> {
    dotenv().ok();

    env::set_var("RUST_LOG", "actix_web=info");
    env_logger::init();
    //he ConnectionManager type is generic over the underlying connection which we specify as SqliteConnection
    //The SqliteConnection type is imported as part of the Diesel prelude because we turned the Sqlite feature on. We then use the r2d.
    let database_url = env::var("DATABASE_URL").expect("DATABASE_URL must be set");
    let manager = ConnectionManager::<SqliteConnection>::new(database_url);
    let pool = r2d2::Pool::builder()
        .build(manager)
        .expect("Failed to create pool.");

    let port = 8998;

   HttpServer::new( || {
        App::new()
            .data(pool.clone())
            .wrap(middleware::Logger::default())
            .configure(routes::users::configure)
    })
        .bind(("127.0.0.1",port))?
        .run()
       .await


}



/*

.wrap(middleware::DefaultHeaders::new().header("Access-Control-Allow-Origin", "*"))
.wrap(middleware::DefaultHeaders::new().header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, DELETE, PUT"))
.wrap(middleware::DefaultHeaders::new().header("Access-Control-Allow-Headers", "X-PINGOTHER,append,Content-Type,delete,entries,foreach,get,has,keys,set,values,Authorization"))
*/











/*    let pool = r2d2::Pool::builder()
        .build(manager)
        .expect("Failed to create pool.");*/